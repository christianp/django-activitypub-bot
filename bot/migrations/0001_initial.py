# Generated by Django 4.1.6 on 2023-03-17 11:32

import bot.models
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Follower',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('follow_date', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='LocalActor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100)),
                ('domain', models.CharField(max_length=200)),
                ('private_key_file', models.FileField(upload_to=bot.models.local_actor_dir)),
                ('public_key_file', models.FileField(upload_to=bot.models.local_actor_dir)),
                ('access_token', models.CharField(max_length=100)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='RemoteActor',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100)),
                ('domain', models.CharField(max_length=200)),
                ('url', models.URLField(max_length=500)),
                ('webfinger', models.JSONField(default=bot.models.default_empty)),
                ('profile', models.JSONField(default=bot.models.default_empty)),
                ('following', models.ManyToManyField(related_name='followers', through='bot.Follower', to='bot.localactor')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('uid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('data', models.JSONField()),
                ('published_date', models.DateTimeField(auto_now=True)),
                ('public', models.BooleanField(default=True)),
                ('actor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='bot.localactor')),
                ('to', models.ManyToManyField(related_name='received_notes', to='bot.remoteactor')),
            ],
        ),
        migrations.AddField(
            model_name='follower',
            name='following',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='follow_relations', to='bot.localactor'),
        ),
        migrations.AddField(
            model_name='follower',
            name='remote_actor',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='following_relations', to='bot.remoteactor'),
        ),
        migrations.AddConstraint(
            model_name='follower',
            constraint=models.UniqueConstraint(fields=('remote_actor', 'following'), name='unique_followers_per_actor'),
        ),
        migrations.RemoveField(
            model_name='remoteactor',
            name='webfinger',
        ),
        migrations.AlterModelOptions(
            name='note',
            options={'ordering': ['-published_date']},
        ),
        migrations.AddField(
            model_name='localactor',
            name='actor_json_file',
            field=models.FileField(blank=True, null=True, upload_to=bot.models.local_actor_dir),
        ),
        migrations.RemoveField(
            model_name='localactor',
            name='access_token',
        ),
        migrations.AddField(
            model_name='note',
            name='announces',
            field=models.ManyToManyField(blank=True, related_name='announces', to='bot.remoteactor'),
        ),
        migrations.AddField(
            model_name='note',
            name='likes',
            field=models.ManyToManyField(blank=True, related_name='likes', to='bot.remoteactor'),
        ),
        migrations.AlterField(
            model_name='note',
            name='to',
            field=models.ManyToManyField(blank=True, related_name='received_notes', to='bot.remoteactor'),
        ),
        migrations.AddField(
            model_name='note',
            name='in_reply_to',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='replies', to='bot.note'),
        ),
        migrations.RenameField(
            model_name='note',
            old_name='actor',
            new_name='local_actor',
        ),
        migrations.AlterField(
            model_name='note',
            name='local_actor',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='bot.localactor'),
        ),
        migrations.AddField(
            model_name='note',
            name='mentions',
            field=models.ManyToManyField(blank=True, related_name='mentions', to='bot.localactor'),
        ),
        migrations.AlterField(
            model_name='note',
            name='local_actor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='bot.localactor'),
        ),
        migrations.AlterField(
            model_name='note',
            name='published_date',
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AddField(
            model_name='note',
            name='remote_actor',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='bot.remoteactor'),
        ),
        migrations.AddField(
            model_name='note',
            name='updated_at',
            field=models.DateTimeField(auto_now=True, null=True),
        ),
        migrations.CreateModel(
            name='AccessToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('access_token', models.CharField(max_length=100)),
                ('actor', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='access_tokens', to='bot.localactor')),
                ('name', models.CharField(max_length=200)),
            ],
        ),
    ]
